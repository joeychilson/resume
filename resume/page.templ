package resume

import (
	"fmt"
	"time"
)

templ Page(resume Resume) {
	<html>
		<head>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<meta name="description" content={ resume.Basics.Summary }/>
			<title>{ fmt.Sprintf("%s | %s", resume.Basics.Name, resume.Basics.Label) }</title>
			<script src="https://cdn.tailwindcss.com"></script>
			<style>
				@media print {
					.print-force-new-page {
						page-break-before: always;
					}
				}
				body {
					font-family: 'Inter', sans-serif;
					font-family: 'Poppins', sans-serif;
				}
			</style>
			<link rel="preconnect" href="https://fonts.googleapis.com"/>
			<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
			<link href="https://fonts.googleapis.com/css2?family=Inter&family=Poppins:wght@300&display=swap" rel="stylesheet"/>
		</head>
		<body class="font-mono">
			<main class="container relative mx-auto scroll-my-12 overflow-auto p-4 print:p-12 md:p-4">
				<section class="mx-auto w-full max-w-2xl space-y-8 bg-white print:space-y-6">
					@BasicsSection(resume.Basics)
					@AboutSection(resume.Basics.Summary)
					if len(resume.Work) > 0 {
						@WorkSection(resume.Work)
					}
					if len(resume.Volunteer) > 0 {
						@VolunteerSection(resume.Volunteer)
					}
					if len(resume.Education) > 0 {
						@EducationSection(resume.Education)
					}
					if len(resume.Publications) > 0 {
						@PublicationsSection(resume.Publications)
					}
					if len(resume.Awards) > 0 {
						@AwardsSection(resume.Awards)
					}
					if len(resume.Skills) > 0 {
						@SkillsSection(resume.Skills)
					}
					if len(resume.Languages) > 0 {
						@LanguagesSection(resume.Languages)
					}
					if len(resume.Interests) > 0 {
						@InterestsSection(resume.Interests)
					}
					if len(resume.References) > 0 {
						@ReferencesSection(resume.References)
					}
					if len(resume.Projects) > 0 {
						@ProjectsSection(resume.Projects)
					}
				</section>
			</main>
		</body>
	</html>
}

templ BasicsSection(basics Basics) {
	<div class="flex items-center justify-between">
		<div class="flex-1 space-y-1.5">
			<h1 class="text-2xl font-bold text-gray-800">{ basics.Name } </h1>
			<p class="max-w-md text-sm text-gray-600">{ basics.Label }</p>
			<p class="max-w-md items-center text-xs text-gray-600">
				<a class="inline-flex gap-x-1.5 align-baseline leading-none hover:underline text-blue-600" href={ templ.SafeURL(fmt.Sprintf("https://www.google.com/maps/place/%s", basics.Location.City)) } target="_blank">
					<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-globe h-3 w-3">
						<circle cx="12" cy="12" r="10"></circle><path d="M12 2a14.5 14.5 0 0 0 0 20 14.5 14.5 0 0 0 0-20"></path>
						<path d="M2 12h20"></path>
					</svg>
					{ fmt.Sprintf("%s, %s %s", basics.Location.City, basics.Location.Region, basics.Location.CountryCode) }
				</a>
			</p>
			@SocialsSection(basics.Phone, basics.Email, basics.Profiles)
			<div class="hidden flex-col gap-x-1 text-sm text-gray-600 print:flex">
				<a href={ templ.SafeURL(fmt.Sprintf("mailto:%s", basics.Email)) }>
					{ basics.Email }
				</a>
				<a href={ templ.SafeURL(fmt.Sprintf("tel:%s", basics.Phone)) }>
					{ basics.Phone }
				</a>
			</div>
		</div>
		<span class="relative flex shrink-0 overflow-hidden rounded-xl h-28 w-28">
			<img class="aspect-square h-full w-full" alt={ basics.Name } src={ basics.Image }/>
		</span>
	</div>
}

templ SocialsSection(phone string, email string, profiles []Profile) {
	<div class="flex gap-x-1 pt-1 text-sm text-gray-600 print:hidden">
		<a href={ templ.SafeURL(fmt.Sprintf("mailto:%s", email)) } class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-400 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-gray-300 bg-white hover:bg-gray-100 hover:text-gray-800 h-8 w-8">
			<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-mail h-4 w-4">
				<rect width="20" height="16" x="2" y="4" rx="2"></rect>
				<path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"></path>
			</svg>
		</a>
		<a href={ templ.SafeURL(fmt.Sprintf("tel:%s", phone)) } class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-400 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-gray-300 bg-white hover:bg-gray-100 hover:text-gray-800 h-8 w-8">
			<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-phone h-4 w-4">
				<path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>
			</svg>
		</a>
		for _, profile := range profiles {
			if profile.Network == "GitHub" {
				<a href={ templ.SafeURL(fmt.Sprintf("https://github.com/%s", profile.Username)) } class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-400 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-gray-300 bg-white hover:bg-gray-100 hover:text-gray-800 h-8 w-8">
					<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="h-4 w-4">
						<path fill="currentColor" d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"></path>
					</svg>
				</a>
			}
			if profile.Network == "LinkedIn" {
				<a href={ templ.SafeURL(fmt.Sprintf("https://www.linkedin.com/in/%s", profile.Username)) } class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-400 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-gray-300 bg-white hover:bg-gray-100 hover:text-gray-800 h-8 w-8">
					<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="h-4 w-4">
						<title>
							LinkedIn
						</title>
						<path fill="currentColor" d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"></path>
					</svg>
				</a>
			}
			if profile.Network == "Twitter" {
				<a href={ templ.SafeURL(fmt.Sprintf("https://x.com/%s", profile.Username)) } class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-400 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-gray-300 bg-white hover:bg-gray-100 hover:text-gray-800 h-8 w-8">
					<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="h-4 w-4">
						<title>X</title>
						<path fill="currentColor" d="M18.901 1.153h3.68l-8.04 9.19L24 22.846h-7.406l-5.8-7.584-6.638 7.584H.474l8.6-9.83L0 1.154h7.594l5.243 6.932ZM17.61 20.644h2.039L6.486 3.24H4.298Z"></path>
					</svg>
				</a>
			}
		}
	</div>
}

templ AboutSection(summary string) {
	<section class="flex min-h-0 flex-col gap-y-3">
		<h2 class="text-xl font-bold text-gray-800">About</h2>
		<p class="text-sm text-gray-600">
			{ summary }
		</p>
	</section>
}

templ WorkSection(work []Work) {
	<section class="flex min-h-0 flex-col gap-y-3">
		<h2 class="text-xl font-bold text-gray-800">Work Experience</h2>
		for _, w := range work {
			<div class="rounded-lg bg-white text-gray-800">
				<div class="flex justify-between items-center">
					<h3 class="text-lg font-semibold">
						<a href={ templ.SafeURL(w.URL) } class="text-blue-600 hover:underline">{ w.Name } </a>
					</h3>
					<span class="text-sm text-gray-600">{ parseDate(w.StartDate) } - { parseDate(w.EndDate) }</span>
				</div>
				<h4 class="text-sm font-medium text-gray-600">{ w.Position }</h4>
				<p class="text-sm text-gray-600 mt-2">{ w.Summary }</p>
				if len(w.Highlights) > 0 {
					<div class="mt-2">
						<h5 class="text-sm font-bold text-gray-800 mb-2">Highlights</h5>
						<ul class="list-disc pl-4 text-sm text-gray-600">
							for _, h := range w.Highlights {
								<li>{ h }</li>
							}
						</ul>
					</div>
				}
			</div>
		}
	</section>
}

templ VolunteerSection(volunteer []Volunteer) {
	<section class="flex min-h-0 flex-col gap-y-3">
		<h2 class="text-xl font-bold text-gray-800">Volunteering Experience</h2>
		for _, v := range volunteer {
			<div class="rounded-lg bg-white text-gray-800">
				<div class="flex justify-between items-center">
					<h3 class="text-lg font-semibold">
						<a href={ templ.SafeURL(v.URL) } class="text-blue-600 hover:underline">{ v.Organization } </a>
					</h3>
					<span class="text-sm text-gray-600">{ parseDate(v.StartDate) } - { parseDate(v.EndDate) }</span>
				</div>
				<h4 class="text-sm font-medium text-gray-600">{ v.Position }</h4>
				<p class="text-sm text-gray-600 mt-2">{ v.Summary }</p>
				if len(v.Highlights) > 0 {
					<div class="mt-2">
						<h5 class="text-sm font-bold text-gray-800 mb-2">Highlights</h5>
						<ul class="list-disc pl-4 text-sm text-gray-600">
							for _, h := range v.Highlights {
								<li>{ h }</li>
							}
						</ul>
					</div>
				}
			</div>
		}
	</section>
}

templ EducationSection(education []Education) {
	<section class="flex min-h-0 flex-col gap-y-3">
		<h2 class="text-xl font-bold text-gray-800">Education</h2>
		for _, e := range education {
			<div class="rounded-lg bg-white text-gray-800">
				<div class="flex justify-between items-center">
					<h3 class="text-lg font-semibold">
						<a href={ templ.SafeURL(e.URL) } class="text-blue-600 hover:underline">{ e.Institution }</a>
					</h3>
					<span class="text-sm text-gray-600">{ parseDate(e.StartDate) } - { parseDate(e.EndDate) }</span>
				</div>
				<div class="flex justify-between items-center">
					<h4 class="text-sm font-medium text-gray-600">{ e.Area }, { e.StudyType }</h4>
					if e.Score != "" {
						<span class="text-sm text-gray-600">GPA: { e.Score }</span>
					}
				</div>
				if len(e.Courses) > 0 {
					<div class="mt-2">
						<h5 class="text-sm font-bold text-gray-800 mb-2">Courses</h5>
						<ul class="list-disc pl-4 text-sm text-gray-600">
							for _, c := range e.Courses {
								<li>{ c }</li>
							}
						</ul>
					</div>
				}
			</div>
		}
	</section>
}

templ AwardsSection(awards []Award) {
	<section class="flex min-h-0 flex-col gap-y-3">
		<h2 class="text-xl font-bold text-gray-800">Awards</h2>
		for _, a := range awards {
			<div class="rounded-lg bg-white text-gray-800">
				<div class="flex justify-between items-center">
					<h3 class="text-lg font-semibold">
						<div class="text-blue-600">{ a.Title }</div>
					</h3>
					<span class="text-sm text-gray-600">{ parseDate(a.Date) }</span>
				</div>
				<h4 class="text-sm font-medium text-gray-600">{ a.Awarder }</h4>
				<p class="text-sm text-gray-600 mt-2">{ a.Summary }</p>
			</div>
		}
	</section>
}

templ PublicationsSection(publications []Publication) {
	<section class="flex min-h-0 flex-col gap-y-3">
		<h2 class="text-xl font-bold text-gray-800">Publications</h2>
		for _, p := range publications {
			<div class="rounded-lg bg-white text-gray-800">
				<div class="flex justify-between items-center">
					<h3 class="text-lg font-semibold">
						<a href={ templ.SafeURL(p.URL) } class="text-blue-600 hover:underline">{ p.Name }</a>
					</h3>
					<span class="text-sm text-gray-600">{ parseDate(p.ReleaseDate) }</span>
				</div>
				<h4 class="text-sm font-medium text-gray-600">{ p.Publisher }</h4>
				<p class="text-sm text-gray-600 mt-2">{ p.Summary }</p>
			</div>
		}
	</section>
}

templ SkillsSection(skills []Skill) {
	<section class="flex min-h-0 flex-col gap-y-3">
		<h2 class="text-xl font-bold text-gray-800">Skills</h2>
		<div class="flex flex-wrap gap-1">
			for _, s := range skills {
				<div class="inline-flex items-center rounded-md border px-2 py-0.5 text-xs font-semibold text-nowrap border-gray-300 bg-gray-200 text-gray-800">{ s.Name }</div>
			}
		</div>
	</section>
}

templ LanguagesSection(languages []Language) {
	<section class="flex min-h-0 flex-col gap-y-3">
		<h2 class="text-xl font-bold text-gray-800">Languages</h2>
		<div class="flex flex-wrap gap-1">
			for _, l := range languages {
				<div class="inline-flex items-center rounded-md border px-2 py-0.5 text-xs font-semibold text-nowrap border-gray-300 bg-gray-200 text-gray-800">{ l.Language }</div>
			}
		</div>
	</section>
}

templ InterestsSection(interests []Interest) {
	<section class="flex min-h-0 flex-col gap-y-3">
		<h2 class="text-xl font-bold text-gray-800">Interests</h2>
		<div class="flex flex-wrap gap-1">
			for _, i := range interests {
				<div class="inline-flex items-center rounded-md border px-2 py-0.5 text-xs font-semibold text-nowrap border-gray-300 bg-gray-200 text-gray-800">{ i.Name }</div>
			}
		</div>
	</section>
}

templ ReferencesSection(references []Reference) {
	<section class="flex min-h-0 flex-col gap-y-3">
		<h2 class="text-xl font-bold text-gray-800">References</h2>
		for _, r := range references {
			<div class="rounded-lg bg-white text-gray-800">
				<div class="flex justify-between items-center mb-1">
					<h3 class="text-lg font-semibold">{ r.Name }</h3>
				</div>
				<blockquote class="italic border-l-4 border-blue-600 pl-4 text-sm text-gray-600">
					{ r.Reference }
				</blockquote>
			</div>
		}
	</section>
}

templ ProjectsSection(projects []Project) {
	<section class="flex min-h-0 flex-col gap-y-3 print-force-new-page">
		<h2 class="text-xl font-bold text-gray-800">Projects</h2>
		<div class="grid grid-cols-1 gap-3 print:grid-cols-3 print:gap-2 md:grid-cols-2 lg:grid-cols-3">
			for _, p := range projects {
				<div class="rounded-lg bg-white text-gray-800 flex flex-col overflow-hidden border border-gray-300 p-3">
					<div class="flex flex-col space-y-1.5">
						<div class="space-y-1">
							<h3 class="font-semibold tracking-tight text-base">
								<a href={ templ.SafeURL(p.URL) } target="_blank" class="inline-flex items-center gap-1 hover:underline">
									{ p.Name }
								</a>
							</h3>
							<div class="hidden text-xs underline print:visible"></div>
							<p class="text-xs text-gray-600">{ p.Description }</p>
							if len(p.Keywords) > 0 {
								<div class="flex flex-wrap gap-1 mt-2">
									for _, keyword := range p.Keywords {
										<div class="inline-flex items-center rounded-md border px-2 py-0.5 text-xs font-semibold text-nowrap border-gray-300 bg-gray-200 text-gray-800">
											{ keyword }
										</div>
									}
								</div>
							}
						</div>
					</div>
				</div>
			}
		</div>
	</section>
}

func parseDate(date string) string {
	parsedDate, _ := time.Parse("2006-01-02", date)
	return parsedDate.Format("2006")
}
